public class Horario
{
    private byte hora, minuto, segundo;
    
    public /*void*/ Horario (byte hora, byte minuto, byte segundo) throws Exception
    {
        this.setHora(hora);
        this.setMinuto(minuto);
        this.setSegundo(segundo);
    }
    
    public byte getHora ()
    {
        return this.hora;
    }
    
    public byte getMinuto ()
    {
        return this.minuto;
    }
    
    public byte getSegundo ()
    {
        return this.segundo;
    }
    
    public void setHora (byte hora) throws Exception
    {
        if (hora<0 || hora>23) throw new Exception ("Hora invalida");
        
        this.hora=hora;
    }
    
    public void setMinuto (byte minuto) throws Exception
    {
        if (minuto<0 || minuto>59) throw new Exception ("Minuto invalido");
        
        this.minuto=minuto;
    }
    
    public void setSegundo (byte segundo) throws Exception
    {
        if (segundo<0 || segundo>59) throw new Exception ("Segundo invalido");
        
        this.segundo=segundo;
    }
    
    public void adiante (int qtdSegundos) throws Exception
    {
        if (qtdSegundos<=0) throw new Exception ("Quantidade invalida");
        
        int horarioAjustado = this.hora*3600+
                              this.minuto*60+
                              this.segundos+
                              qtdSegundos;
                              // valor expresso em segundos
                                
        this.segundo = (byte)(horarioAjustado%60);
        horarioAjustado = horarioAjustado/60;
        // valor expresso em minutos
        
        this.minuto = (byte)(horarioAjustado%60);
        horarioAjustado = horarioAjustado/60;
        // valor expresso em horas
        
        this.hora = (byte)(horarioAjustado%24);
        // horarioAjustado = horarioAjustado/24;
        // valor expresso em dias; desprezaremos este valor
    }
    
    public Horario getHorarioFuturo (int qtdSegundos) throws Exception
    {
        Horario ret=new Horario(this.hora,this.minuto,this.segundo);
        ret.adiante(qtdSegundos);
        return ret;
    }
    
    public void atrase (int qtdSegundos) throws Exception
    {
        if (qtdSegundos<=0) throw new Exception ("Quantidade invalida");
        
        int horarioAjustado = this.hora*3600+
                              this.minuto*60+
                              this.segundos-
                              qtdSegundos;
                              // valor expresso em segundos
                              
        if (horarioAjustado<0)
            horarioAjustado += (-horarioAjustado/86400+1)*86400;
            //horarioAjustado = horarioAjustado%86400+86400;
                                
        this.segundo = (byte)(horarioAjustado%60);
        horarioAjustado = horarioAjustado/60;
        // valor expresso em minutos
        
        this.minuto = (byte)(horarioAjustado%60);
        horarioAjustado = horarioAjustado/60;
        // valor expresso em horas
        
        this.hora = (byte)(horarioAjustado%24);
        // horarioAjustado = horarioAjustado/24;
        // valor expresso em dias; desprezaremos este valor
    }
    
    public Horario getHorarioPassado (int qtdSegundos) throws Exception
    {
        Horario ret=new Horario(this.hora,this.minuto,this.segundo);
        ret.atrase(qtdSegundos);
        return ret;
    }
    public int diferenca (Horario h) throws Exception
    {
        if (h==null) throw new Exception ("Horario nao fornecido");
        
        int thisEmSegs = this.hora*3600+
                         this.minuto*60+
                         this.segundos;
                         
        int hEmSegs = h.hora*3600+
                      h.minuto*60+
                      h.segundos;
                      
        return thisEmSegs-hEmSegs;
    }
    
    @Override
    public String toString ()
    {
        return (this.hora<10?"0":"") + this.hora + ":" +
               (this.minuto<10?"0":"") + this.minuto + ":" +
               (this.segundo<10?"0":"") + this.segundo; 
    }
    
    @Override
    public boolean equals (Object obj)
    {
        if (obj==this) return true;
        if (obj==null) return false;
        if (obj.getClass()!=this.getClass()) return false;
        
        Horario h = (Horario)obj;
        if (h.hora!=this.hora) return false;
        if (h.minuto!=this.minuto) return false;
        if (h.segundo!=this.segundo) return false;
        
        return true;
    }
    
    @Override
    public int hashCode ()
    {
        int ret=1; // int ret=super.hashCode();
        
        // se houvesse um atributo atr que fosse objeto
        // if (atr!=null) ret = ret*2/*um primo qualquer*/ + atr.hashCode();
        
        ret = ret*3 + new Byte (this.hora).hashCode(); // deprecated (obsoleto)
        ret = ret*5 + Byte.valueOf(this.minuto).hashCode();
        ret = ret*7 + ((Byte)this.segundo).hashCode();
        
        if (ret<0) ret=-ret;
        return ret;
    }
}

// faÃ§a uma classe Main para testar
    
